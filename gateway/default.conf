server {
    listen 80;
    server_name localhost;

    location ~ ^/([^/]+)/api/ {
        set $service $1;
        set $user_id $http_x_user_id;
        set $signature $http_x_signature;

        if ($user_id = "") {
            return 400 "Missing X-User-ID";
        }

        if ($signature = "") {
            return 400 "Missing X-Signature";
        }

        access_by_lua_block {
            local ffi = require "ffi"
            local C = ffi.C

            ffi.cdef[[
            typedef unsigned int uint;
            typedef unsigned char uchar;
            uchar *HMAC(const void *evp_md, const void *key, int key_len,
                        const uchar *d, int n, uchar *md, uint *md_len);
            void *EVP_sha256(void);
            ]]

            local base64 = require("ngx.base64")
            local secret_key = os.getenv("SECRET_KEY")
            local user_id = ngx.var.user_id
            local signature = ngx.var.signature

            if not secret_key then
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end

            local md = ffi.new("unsigned char[32]")
            local md_len = ffi.new("unsigned int[1]")

            local result_ptr = C.HMAC(C.EVP_sha256(),
                                    secret_key, #secret_key,
                                    user_id, #user_id,
                                    md, md_len)

            if result_ptr == nil then
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end

            local signature_bin = ffi.string(md, md_len[0])
            local expected_signature = base64.encode_base64url(signature_bin)

            if expected_signature ~= signature then
                ngx.status = ngx.HTTP_UNAUTHORIZED
                ngx.say("Invalid Signature")
                return ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end
        }

        # 검증 후 프록시는 routes/*.conf에서 처리
        # 즉 /user/api → routes/user.conf
        try_files $uri @dynamic_proxy;
    }

    # 공통 프록시 처리용 내부 라우트
    location @dynamic_proxy {
        # /user/api → /user → routes/user.conf
        # 실제 라우팅은 routes에서 처리됨
        return 404;  # fallback, 실제는 routes에서 잡힘
    }

    # ✅ routes/*.conf 포함
    include /etc/nginx/conf.d/routes/*.conf;
}
